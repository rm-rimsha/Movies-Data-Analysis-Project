--Relation between Budget and Revenue
Select budget, revenue 
From movies
Where budget <> 0 and revenue <> 0
Order by budget DESC;

--Create a temptable to store the number of movies in each genre
Drop table if exists #numofmovies;
Create table #numofmovies(Total int, genres nvarchar(max));

Insert into #numofmovies
Select count(title) as NumberofMovies, genre_list
From movies
Where genre_list is not null 
Group by genre_list
Order by count(title) DESC;

Select * From #numofmovies Where total > 4 Order by Total DESC;

--RevenueBudget Ratio of each genre
Select n.genres, (avg(m.revenue)/avg(m.budget)*100) as RevenueBudgetRatio
From movies m join #numofmovies n on m.genre_list = n.genres
Where m.revenue <> 0 and m.budget <> 0 and n.Total > 10
Group by n.genres
Order by RevenueBudgetRatio DESC;

--Revenue of Movies with low budget 
Select budget, revenue
From movies 
Where budget < (Select AVG(budget) From movies) and revenue <> 0
Order by revenue desc;

--Genre with the highest popularity
Select genre_list, title
From movies
Where popularity = (Select max(popularity) From movies);

--Genre with the highest revenue
Select genre_list, title
From movies
Where revenue = (Select max(revenue) From movies);

--List of genres with high popularity
Select m.genre_list, AVG(m.Popularity) as Popularity
From movies m join #numofmovies n on m.genre_list = n.genres
Where m.genre_list is not null and n.total > 10
Group by genre_list
Order by Popularity DESC;


--Years vs revenue
Select Year(release_date) as Year,AVG(budget) as AverageBudget, AVG(Revenue) as AverageRevenue
From movies
Where revenue <> 0
Group by Year(release_date)
Order by year(release_date);

--Shows the average budget and average revenue of each genre over the years
Select Year(release_date) as Year, genre_list,
	   AVG(budget) OVER (Partition by genre_list) as AvgBudget, AVG(revenue) over (partition by genre_list) as AvgRevenue
From movies
Where genre_list is not null and budget<>0 and revenue <> 0
Order by Year; 

--Shows the percentage of each genre in the total yearly budget and revenue
--Using CTEs
WITH YearlyBudgetRevenue AS (
    SELECT
        Year(m.release_date) AS Year, m.genre_list,
        SUM(m.budget) OVER (PARTITION BY Year(m.release_date)) AS TotalYearlyBudget,
        SUM(m.revenue) OVER (PARTITION BY Year(m.release_date)) AS TotalYearlyRevenue,
        SUM(m.budget) OVER (PARTITION BY Year(m.release_date), m.genre_list) AS GenreBudget,
        SUM(m.revenue) OVER (PARTITION BY Year(m.release_date), m.genre_list) AS GenreRevenue
    FROM movies m join #numofmovies n on m.genre_list = n.genres
    WHERE m.genre_list IS NOT NULL
    AND m.budget <> 0
    AND m.revenue <> 0
	AND n.Total > 10
), YearlyGenreBudgetRevenue AS (
	SELECT Year, genre_list, TotalYearlyBudget, TotalYearlyRevenue, GenreBudget, GenreRevenue,
			CAST(GenreBudget as FLOAT) / CAST(TotalYearlyBudget as FLOAT)* 100 AS BudgetPercentage,
			(GenreRevenue / TotalYearlyRevenue) * 100 AS RevenuePercentage
	FROM YearlyBudgetRevenue)

Select Year, genre_list, TotalYearlyBudget, TotalYearlyRevenue, GenreBudget, GenreRevenue, BudgetPercentage, RevenuePercentage
From YearlyGenreBudgetRevenue 
Where BudgetPercentage < 100 and RevenuePercentage < 100
Order by Year, genre_list;


--Votes vs popularity vs revenue
Select m.vote_count, m.popularity, m.revenue
From movies m join #numofmovies n on m.genre_list = n.genres
Where m.vote_count <> 0 and m.popularity <> 0 and m.revenue <> 0 and n.Total > 10
order by m.vote_count DESC;

--Shows the average revenue of movies of different runtimes
--Depicts the relationship between runtime and revenue
Select m.runtime, avg(m.revenue) as AvgRevenue
From movies m join #numofmovies n on m.genre_list = n.genres
Where m.runtime <> 0 and m.revenue <> 0 and n.total > 10
group by m.runtime
Order by m.runtime;

--Shows the revenue for each season
Select m.season, SUM(m.revenue) as TotalRevenue
From movies m join #numofmovies n on m.genre_list = n.genres
Group by m.season
Order by TotalRevenue DESC;

--Shows the revenue generated by each genre in each season
Select season, genre_list, SUM(revenue) as TotalRevenue
From movies
Group by season, genre_list
Order by TotalRevenue DESC;


